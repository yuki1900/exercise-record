Given two positive integers n and k, the binary string  Sn is formed as follows:

S1 = "0"
Si = Si-1 + "1" + reverse(invert(Si-1)) for i > 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first 4 strings in the above sequence are:

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

Example 1:
Input: n = 3, k = 1
Output: "0"
Explanation: S3 is "0111001". The first bit is "0".

Example 2:
Input: n = 4, k = 11
Output: "1"
Explanation: S4 is "011100110110001". The 11th bit is "1".

Example 3:
Input: n = 1, k = 1
Output: "0"

Example 4:
Input: n = 2, k = 3
Output: "1"

Constraints:
1 <= n <= 20
1 <= k <= 2n - 1


Solution:
class Solution {
public:

    int invert(int num){
        return num == 1? 0:1;
    }
        
    
    int trace(int n,int k){
        if(n == 1)return 0;
        int flag = pow(2,n-1);
        if(k == flag) return 1;
        else if(k < flag) return trace(n-1,k);
        else return invert(trace(n-1,2*flag-k)); 
    }
    char findKthBit(int n, int k) {
        return trace(n,k)+48;
    }
};

/* 思路：
找Sn的第k位：len为Sn的长度
1.当k = len/2时，Sn[k] = 1
2.当k < len/2时，Sn[k] = Sn-1[k]
3.当k > len/2时，Sn[k] = invert(Sn-1[len-k])

S4 = "011100110110001", k = 11时：

k>2^4/2, S4[11] = invert(S3[16-11]) = invert(S3[5])

k>2^3/2, S3[5]  = invert(S2[8-5])   = invert(S2[3])

k>2^2/2, S2[3]  = invert(S1[4-3])   = invert(S1[1]) = invert(0) = 1
*/
