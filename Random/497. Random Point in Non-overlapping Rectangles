Given a list of non-overlapping axis-aligned rectangles rects, 
write a function pick which randomly and uniformily picks an integer point in the space covered by the rectangles.

Note:

An integer point is a point that has integer coordinates. 
A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the bottom-left corner, and [x2, y2] are the integer coordinates of the top-right corner.
length and width of each rectangle does not exceed 2000.
1 <= rects.length <= 100
pick return a point as an array of integer coordinates [p_x, p_y]
pick is called at most 10000 times.

Example 1:

Input: 
["Solution","pick","pick","pick"]
[[[[1,1,5,5]]],[],[],[]]
Output: 
[null,[4,1],[4,1],[3,3]]

Example 2:

Input: 
["Solution","pick","pick","pick","pick","pick"]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
Output: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]
Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array of rectangles rects. pick has no arguments. Arguments are always wrapped with a list, even if there aren't any.
class Solution {
public:

    mt19937 rng{random_device{}()};
    uniform_int_distribution<int> uni_point;
    vector<vector<int>> r;
    vector<int> pre;
    int total;
    Solution(vector<vector<int>>& rects):r(rects),total(0) {  // 尝试把所有point存起来的话会超时
        int size = rects.size();
        pre = vector<int>(size);
        for(int i = 0; i < size; ++i){
            pre[i] = (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);
            if(i > 0){
                pre[i] += pre[i-1];
            }
        }
        uni_point = uniform_int_distribution<int>(0,pre.back()-1);
    }
    
    vector<int> pick() {
        int flag = uni_point(rng);
        
        vector<int> point(2);
        for(int i = 0; i < pre.size(); ++ i){
            if(pre[i] > flag){
                int dist; // 偏移量，根据偏移量找到是某一个矩形内的点，然后根据行列长度计算出是哪个点。
                if(i > 0){
                    dist = pre[i-1];
                }
                else dist = 0;
                int width = r[i][2] - r[i][0] + 1;

                // 这里的逻辑需要重点看一下，一开始出错是在于写反了
                // point[0] = r[i][0] + (flag-dist) / width;
                // point[1] = r[i][1] + (flag-dist) % width;
                
                point[0] = r[i][0] + (flag-dist) % width;
                point[1] = r[i][1] + (flag-dist) / width;

                break;
            }
        }
        return point;
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(rects);
 * vector<int> param_1 = obj->pick();
 */
