Given an array of integers arr of even length, return true if and only if it is possible to reorder it such that arr[2 * i + 1] = 2 * arr[2 * i] 
for every 0 <= i < len(arr) / 2.

Example 1:
Input: arr = [3,1,3,6]
Output: false

Example 2:
Input: arr = [2,1,2,6]
Output: false

Example 3:
Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].
Example 4:

Input: arr = [1,2,4,16,8,4]
Output: false
Â 

Constraints:
0 <= arr.length <= 3 * 104
arr.length is even.
-105 <= arr[i] <= 105

class Solution {
public:
    bool canReorderDoubled(vector<int>& arr) {
        map<int,int> dict;
        vector<int> positive,negative;
        for(int i : arr){
            // if(dict.find(i) == dict.end()){
            //     dict[i]=1;
            // }
            // else dict[i]++;
            dict[i]++;
            if(i>0)positive.emplace_back(i);
            else negative.emplace_back(i);
        }
        sort(positive.begin(),positive.end());
        sort(negative.begin(),negative.end(),greater<int>());
        for(int i : positive){
            if(dict[i]>0){
                if(dict.find(i*2)!=dict.end()){
                    if(dict[i*2]>0){
                        dict[i] --;
                        dict[i*2]--;
                    }
                    else return false;
                }
                else return false;
            }
        }
        for(int i : negative){
            if(dict[i]>0){
                if(dict.find(i*2)!=dict.end()){
                    if(dict[i*2]>0){
                        dict[i] --;
                        dict[i*2]--;
                    }
                    else return false;
                }
                else return false;
            }
        }
        return true;
    }
};
