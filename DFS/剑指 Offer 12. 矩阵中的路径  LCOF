请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。
如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

示例 1：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true

示例 2：
输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false
 
提示：
1 <= board.length <= 200
1 <= board[i].length <= 200

class Solution {
public:

    bool isExist(vector<vector<char>>& board,vector<vector<bool>>& visited, int x, int y, string word, int pos){
        if(pos == word.size())return true;
        visited[x][y] = true;
        int dp[4][2] = {{1,0},{-1,0},{0,1},{0,-1}},nx,ny;
        for(int k = 0; k < 4; k ++){
            nx = x+dp[k][0];
            ny = y+dp[k][1];
            if(nx>=0 && nx < board.size() && ny>=0 && ny < board[0].size()){
                if(!visited[nx][ny]){
                    if(word[pos] == board[nx][ny]){
                        if(isExist(board,visited,nx,ny,word,pos+1))
                            return true;
                    }
                }
            }
        }
        visited[x][y] = false;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        vector<vector<bool>> visited(board.size(),vector<bool>(board[0].size(),false));
        for(int x = 0 ; x < board.size(); x ++){
            for(int y = 0; y < board[0].size(); y ++){
                if(board[x][y] == word[0]){
                    if(isExist(board,visited,x,y,word,1)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
};

/* 更优解:
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        rows = board.size();
        cols = board[0].size();
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(dfs(board, word, i, j, 0)) return true;
            }
        }
        return false;
    }
private:
    int rows, cols;
    bool dfs(vector<vector<char>>& board, string word, int i, int j, int k) {
        if(i >= rows || i < 0 || j >= cols || j < 0 || board[i][j] != word[k]) return false;
        if(k == word.size() - 1) return true;
        board[i][j] = '\0';     // 临时修改board值，充当visited数组，节省空间
        bool res = dfs(board, word, i + 1, j, k + 1) || dfs(board, word, i - 1, j, k + 1) ||        // 直接递归，减少判断。
                      dfs(board, word, i, j + 1, k + 1) || dfs(board, word, i , j - 1, k + 1);
        board[i][j] = word[k];
        return res;
    }
};
*/
