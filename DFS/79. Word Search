Given an m x n board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where "adjacent" cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.

Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 
Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 200
1 <= word.length <= 103
board and word consists only of lowercase and uppercase English letters.

class Solution {
public:
    int directions[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
    bool dfs(const vector<vector<char>>& board, int x, int y, vector<vector<bool>>& map, string & word, int pos){
        if(pos == word.size()-1)return true;
        map[x][y] = false;
        int nx,ny,r = board.size(), c = board[0].size();
        for(int k = 0; k < 4 ; k ++){
            nx = x + directions[k][0];
            ny = y + directions[k][1];
            if(0 <= nx && nx < r && 0 <= ny && ny < c){
                if(word[pos+1] == board[nx][ny] && map[nx][ny]){
                    if(dfs(board,nx,ny,map,word,pos+1))return true;
                }
            }
        }
        map[x][y] = true;
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int r = board.size(), c = board[0].size();
        vector<vector<bool>> map(r, vector<bool>(c,true));
        for(int i = 0 ; i < r ; i ++){
            for(int j = 0; j < c ; j ++){
                if(board[i][j] == word[0]){
                    if(dfs(board,i,j,map,word,0))return true;
                }
            }
        }
        return false;
    }
};
