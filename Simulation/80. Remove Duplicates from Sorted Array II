Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:

Confused why the returned value is an integer, but your answer is an array?

Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
 

Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It doesn't matter what you leave beyond the returned length.
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3]
Explanation: Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length.
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums is sorted in ascending order.

class Solution {
public:

    int removeDuplicates(vector<int>& nums) {
        if(nums.size()<2)return nums.size();    // 数组大小小于k，可以直接返回长度
        int slow = 2, fast = 2;                 // 本题k = 2，直接从第三个位置开始
        while(fast < nums.size()){          
            if(nums[slow-2] != nums[fast]){     // slow代表的是下一个要放数字的位置，在这个位置上的数必须保证和前两个数不一样
                nums[slow++] = nums[fast];      // 这里判断的是nums[slow-2] != nums[fast]，注意为什么不和nums[slow-1]比较
            }
            fast++;                             
        }
        return slow;
    }

};
