Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size(), total = m * n;
        vector<int> ans(m*n,0);
        int top = 0, right = 0, bottom = 0, left = 0, i = 0;
        while(i < total){
            for(int j = left ; j < n-right ; j ++){
                ans[i++]=matrix[top][j];
            }
            ++top;
            if(i >= total)break;
            for(int j = top ; j < m-bottom ; j ++){
                ans[i++]=matrix[j][n-right-1];
            }
            ++right;
            if(i >= total)break;
            for(int j = n-right-1; j >= left ; j --){
                ans[i++]=matrix[m-bottom-1][j];
            }
            ++bottom;
            if(i >= total)break;
            for(int j = m-bottom-1 ; j >= top ; j --){
                ans[i++]=matrix[j][left];
            }
            ++left;
        }
        return ans;
    }
};
