Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.
Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Example 1:

Input: root = [4,2,6,1,3]
Output: 1

Example 2:

Input: root = [1,0,48,null,null,12,49]
Output: 1

Constraints:

The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 105

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    void inorder(TreeNode * root){
        if(root -> left){
            inorder(root->left);
        }
        ans.push_back( root->val );
        if(root -> right){
            inorder(root->right);
        }
    }
    int minDiffInBST(TreeNode* root) {
        inorder(root);
        // 在二叉搜索树中，中序遍历会将树中节点按数值大小顺序输出。只需要遍历计算相邻数的差值，取其中最小的就可以了。
        sort(ans.begin(),ans.end());
        int diff = INT_MAX;
        for(int i = 0; i < ans.size()-1; i ++){
            diff = diff < ans[i+1] - ans[i] ? diff : ans[i+1] - ans[i];
        }
        return diff;
    }
};
