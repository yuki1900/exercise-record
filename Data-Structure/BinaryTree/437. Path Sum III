You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 以下代码会造成重复判断 
    // int ans = 0;
    // void search(TreeNode* root, int sum, int aim){
    //     if(root==nullptr)return;

    //     if(sum + root->val == aim){
    //         cout<<root->val<<" ";
    //         ans++;
    //     }
    //     search(root->left,  sum + root->val, aim);
    //     search(root->right, sum + root->val, aim);

    //     search(root->left,  0, aim);
    //     search(root->right, 0, aim);

    // }
    // int pathSum(TreeNode* root, int sum) {
    //     search(root,0,sum);
    //     return ans;
    // }

    // 从根节点选择到当前节点
    int search(TreeNode * root, int sum){
        if(root == nullptr)return 0;
        int count = root->val == sum;
        // 假如上方两行代码改为下方所示也会重复判断
        // int count = sum == 0 ;
        // if(root == nullptr)return count;
        count += search(root->left, sum - root->val);
        count += search(root->right,sum - root->val);
        return count;
    }
    int pathSum(TreeNode* root, int sum){
        return root == nullptr ? 0 : pathSum(root->left,sum) + pathSum(root->right,sum) + search(root,sum);
    }
};
