We are given the head node root of a binary tree, where additionally every node's value is either a 0 or a 1.
Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)

Example 1:
Input: [1,null,0,0,1]
Output: [1,null,0,null,1]
 
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.

Example 2:
Input: [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]

Example 3:
Input: [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]

Note:

The binary tree will have at most 200 nodes.
The value of each node will only be 0 or 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasOne(TreeNode * root){
        if(!root)return false;  // NULL return false
        int leftflag = true, rightflag = true;
        if(!hasOne(root->left)){    // Search whether left subtree has 1 node. 
            root->left = NULL;      // If not, cut this subtree off.
            leftflag = false;
        }
        if(!hasOne(root->right)){   // Search whether right subtree has 1 node. 
            root->right = NULL;     // If not, cut this subtree off.
            rightflag = false;
        }
        if(root->val == 1)return true;  // Check whether this node is 1 node
        else return leftflag || rightflag;  // If this node is not 1 node, then check if its subtree has 1 node, if not cut it all off.
    }
    TreeNode* pruneTree(TreeNode* root) {
        if(!hasOne(root))return NULL;   // Remember to check root node
        return root;
    }
};
