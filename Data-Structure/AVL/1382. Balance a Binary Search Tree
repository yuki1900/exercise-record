Given a binary search tree, return a balanced binary search tree with the same node values.
A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.
If there is more than one answer, return any of them.

Example 1:
Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.

Constraints:

The number of nodes in the tree is between 1 and 10^4.
The tree nodes will have distinct values between 1 and 10^5.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> inorder;  
    void getInorder(TreeNode * root){ // 创建中序遍历序列
        if(root -> left){
            getInorder(root->left);
        }
        inorder.push_back(root);
        if(root -> right){
            getInorder(root->right);
        }
    }

    TreeNode * build(vector<TreeNode*> &inorder, int begin, int end){ // 在中序遍历中，对半分，以中间节点为root，向左向右分别构建子树，在这种方式下可以构建AVL，贪心算法可以证明
        if(begin>end)return NULL;
        int mid = ( end - begin ) / 2 + begin;
        TreeNode * newroot = new TreeNode(inorder[mid]->val);
        newroot->left = build(inorder,begin,mid-1);
        newroot->right = build(inorder,mid+1,end);
        return newroot;
    }
    // 也可以通过旋转的方式构造。
    TreeNode* balanceBST(TreeNode* root) {
        getInorder(root);
        return build(inorder,0,inorder.size()-1);
    }
};
