Given the head of a linkedÂ list, rotate the list to the right by k places.

Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:

Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        ListNode* pre = new ListNode(-101); // State a parameter to record the pointer before pointer n.
        ListNode* n = head;                 // The main pointer we use.
        if(n == NULL)return head;           // Constraint
        int len = 1;                        // Record the length of List so that we can cut off redundant calculation by % operation
        while(n->next!=NULL){
            pre = n;
            n = n->next;
            len++;
        }
        n->next = head;
        k %= len;
        while(len-k>=0){
            pre = n;
            n = n->next;
            ++k; 
        }
        head = n;
        pre->next = NULL;
        return head;
    }
};
