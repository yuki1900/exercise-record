Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Example 1:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
Â 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        for(int i = 0; i < matrix.size(); ++i){
            if(target<=matrix[i][matrix[0].size()-1]){
                int mid, begin = 0, end = matrix[0].size();
                while(begin < end){
                    mid = (end - begin)/2 + begin;
                    if(matrix[i][mid] < target){
                        begin = mid + 1;
                    }
                    else{
                        end = mid;
                    }
                }
                if(matrix[i][begin] == target)return true;
                return false;
            }
        }
        return false;
    }
};
