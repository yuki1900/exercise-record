1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold
Given a m x n matrix mat and an integer threshold. Return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.

Example 1:
Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
Output: 2
Explanation: The maximum side length of square with sum less than 4 is 2 as shown.

Example 2:
Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1
Output: 0

Example 3:
Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6
Output: 3

Example 4:
Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184
Output: 2

Constraints:

1 <= m, n <= 300
m == mat.length
n == mat[i].length
0 <= mat[i][j] <= 10000
0 <= threshold <= 10^5

class Solution {
public:
    // How awesome that this is the first problem I quickly thought of a solution on my own and soon finish it with "Accepted".
    bool find(vector<vector<int>> dp, int threshold, int sideLen){
        int r = dp.size(), c = dp[0].size(), square;
        for(int i = sideLen; i < r ; i++){
            for(int j = sideLen; j < c ; j ++){
                square = dp[i][j] + dp[i-sideLen][j-sideLen] - dp[i-sideLen][j] - dp[i][j-sideLen];
                if(square <= threshold)
                    return true;
            }
        }
        return false;
    }

    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        int r = mat.size(), c = mat[0].size();
        vector<vector<int>> dp(r+1,vector<int>(c+1));
        for(int i = 0; i < r; i ++){
            for(int j = 0; j < c; j ++){
                dp[i+1][j+1] = dp[i+1][j] + mat[i][j];
            }
        }
        for(int i = 1; i < r+1; i ++){
            for(int j = 1; j < c+1; j ++){
                dp[i][j] += dp[i-1][j];
            }
        }
        //
        // cout<<dp[3][4] + dp[1][2] - dp[3][2] - dp[1][4]<<endl;
        //
        // for(int i = 0; i < r+1; i ++){
        //     for(int j = 0; j < c+1; j ++){
        //         cout<<dp[i][j]<<" ";
        //     }cout<<endl;
        // }
        int left = 2, right = r>c?c:r, mid, ans = 0;
        while(left<=right){
            mid = left + (right - left)/2;
            if(find(dp,threshold,mid)){
                ans = mid;
                left = mid + 1;
            }
            else right = mid - 1;
            //cout<<"left = "<<left<<"; right = "<<right<<endl;
        }
        return ans;
    }
};
