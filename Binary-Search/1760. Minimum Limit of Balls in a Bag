You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.
You can perform the following operation at most maxOperations times:
Take any bag of balls and divide it into two new bags with a positive number of balls.
For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.
Return the minimum possible penalty after performing the operations.

Example 1:

Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.

Example 2:

Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].
The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.

Example 3:

Input: nums = [7,17], maxOperations = 2
Output: 7

Constraints:

1 <= nums.length <= 105
1 <= maxOperations, nums[i] <= 109

class Solution {
public:
    // 思路并非顺着找合适的答案，而是反过来尝试答案再用二分法缩减尝试的范围最终找到合适的答案。
    int minimumSize(vector<int>& nums, int maxOperations) {
        int begin = 1, end = *max_element(nums.begin(),nums.end()); // 估计一个查找范围
        int ans = INT_MAX;
        while(begin<=end){  
            int mid = (begin+end)>>1;       // 尝试一个答案
            int temp = 0;
            for(int num:nums){              // 计算nums中比mid大的数分割成皆比mid小的数（可能分割成2个也可能是n个），需要多少步
                temp+=(num-1)/mid;          // 统计总步数
            }
            if(temp<=maxOperations){        // 是否符合要求
                ans = mid;                  // 记录该答案
                end = mid-1;                // 缩减搜索范围
            }
            else{
                begin = mid+1;
            }
        }
        return ans;
    }
};
