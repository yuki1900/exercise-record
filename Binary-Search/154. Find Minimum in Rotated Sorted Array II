Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

Example 1:

Input: nums = [1,3,5]
Output: 1
Example 2:

Input: nums = [2,2,2,0,1]
Output: 0
 
Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
nums is sorted and rotated between 1 and n times.

class Solution {
public:
    int findMin(vector<int>& nums) {
        int begin = 0, end = nums.size()-1;
        while(begin < end){
            int mid = (begin + end) / 2;
            if(nums[mid] <= nums[end]){ // 假如nums[mid] < nums[end] 毫无疑问要end-1，重点在于数组中可以出现重复元素了，所以就可能有nums[mid]=nums[end]的情况
                                        // 首先这种情况发生时nums[begin] >= nums[mid] = nums[end]，让mid向最终答案靠拢必然是end-1，如果begin+1，得到的结果显然还是一样的nums[mid] = nums[emd]
                end--;
            }
            else begin++;
        }
        return nums[begin];
    }
};
