
You have n  tiles, where each tile has one letter tiles[i] printed on it.
Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

Example 1:

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: tiles = "AAABBC"
Output: 188
Example 3:

Input: tiles = "V"
Output: 1
 

Constraints:
1 <= tiles.length <= 7
tiles consists of uppercase English letters.


class Solution {
public:

    int ans = 0;
    void search(vector<int> &dict){
        for(int &i : dict){ //相当于每次遍历数组，找出一个字母进行使用，由于每个i代表的是不同字符的剩余可使用次数，所以不会重复，相当于剪枝
            if(i > 0){
                i--;
                ans++;
                search(dict);
                i++;
            }
        }
    }

    int numTilePossibilities(string tiles) {
        vector<int> dict(26,0);
        for(char c : tiles){
            dict[c-65]++;
        }
        int i , j , len = 0;
        for(i = 0; i < 26; i ++){
            if(dict[i]!=0)continue;
            for(j = i + 1; j < 26; j ++){
                if(dict[j]==0)continue;
                swap(dict[i],dict[j]);
                break;
            }
            len++;
        }
        dict.resize(len);
        search(dict);
        return ans;

    }
};
