You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.

 

Example 1:
Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.

Example 2:
Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].

Example 3:
Input: nums = [4,3,2,1,1,2,3,1]
Output: 4

Example 4:
Input: nums = [1,2,3,4,4,3,2,1]
Output: 1
 
Constraints:

3 <= nums.length <= 1000
1 <= nums[i] <= 109
It is guaranteed that you can make a mountain array out of nums.

class Solution {
public:
    int minimumMountainRemovals(vector<int>& nums) {
        int len = nums.size();
        // left 和 right 代表着最长升序列的长度和最长降序列的长度
        int * left = new int[len];
        int * right = new int[len];
        for(int i = 0; i < len ; ++ i){
            left[i] = 1;
            for(int j = 0; j < i ; ++ j ){
                if(nums[j] < nums[i]){
                    left[i] = max(left[j]+1, left[i]);
                }
            }
        }
        for(int i = len-1; i >= 0 ; -- i){
            right[i] = 1;
            for(int j = len-1; j > i ; -- j ){
                if(nums[j] < nums[i]){
                    right[i] = max(right[j]+1, right[i]);
                }
            }
        }
        int ans = 0;
        for(int i = 1; i < len-1; ++ i){
            // 必须要有峰，则需要保证两边都有坡度
            // 比如用例：[100,92,89,77,74,66,64,66,64]不能只删除最后的 66 和 64
            // 一个位置满足成为峰的条件是：left[i] > 1 && right[i] > 1
            if(left[i]!=1 && right[i]!=1)
                ans = max(ans , left[i] + right[i] - 1);
        }
        delete[] left;
        delete[] right;

        return len-ans;

    }
};
