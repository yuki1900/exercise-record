Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
Return true if there is a 132 pattern in nums, otherwise, return false.
Follow up: The O(n^2) is trivial, could you come up with the O(n logn) or the O(n) solution?

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

Constraints:

n == nums.length
1 <= n <= 104
-109 <= nums[i] <= 109

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int n = nums.size();
        if(n<3)return false;
        multiset<int> ms;   // 存储右侧的所有元素，用multiset可以存储重复元素并且排序便于查找
        for(int k = 2; k < n; k ++){
            ms.insert(nums[k]);
        }
        int left_min = nums[0]; // 左侧最小元素
        for(int j = 1; j < n - 1; j ++){
            if(nums[j] > left_min){
                auto bound = ms.upper_bound( left_min );
                if(bound != ms.end() && *bound < nums[j]){
                    return true;
                }
            }
            left_min = nums[j] < left_min ? nums[j] : left_min;
            // 这里不能写成 ms.erase(nums[j+1]),否则会删除所有值为nums[j+1]的元素
            ms.erase(ms.find(nums[j+1]));
        }
        return false;
    }
};
