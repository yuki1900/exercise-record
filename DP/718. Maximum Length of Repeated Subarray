Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.

Example 1:

Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].

Note:

1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100

class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        vector<vector<int>> dp(A.size(), vector<int>(B.size()));
        int ans = 0;
        for(int i = 0; i < A.size(); i ++){
            dp[i][0] = A[i] == B[0];
            ans = max(ans,dp[i][0]);
        }
        for(int j = 0; j < B.size(); j ++){
            dp[0][j] = A[0] == B[j];
            ans = max(ans,dp[0][j]);
        }
        for(int i = 1; i < A.size(); i ++){
            for(int j = 1; j < B.size(); j ++){
                if(A[i] == B[j]){
                    dp[i][j] = dp[i-1][j-1] + 1;
                }
                else{
                    dp[i][j] = 0;
                }
                ans = max(ans,dp[i][j]);
            }
        }
        return ans;
    }
};
