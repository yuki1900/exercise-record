You are given a 0-indexed integer array nums and an integer k.
You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.
You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.
Return the maximum score you can get.

Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.

Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.

Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0

Constraints:
 1 <= nums.length, k <= 105
-104 <= nums[i] <= 104

class Solution {
public:
    int maxResult(vector<int>& nums, int k) {
        // 普通DP超时，在于每次的第二重循环都对k个元素进行重复判断，比如当i = 10，k = 3 时判断了 j = 7，8，9的情况
        // 当i = 11时，判断了8，9，10的情况，8，9重复，即每个元素被重复判断了k次，可以维护一个优先队列减少判断次数
        // vector<int> dp(nums.size(),0);
        // dp[0] = nums[0];
        // int temp;
        // for(int i = 1; i < nums.size(); ++ i){
        //     temp = dp[max(i - k,0)] + nums[i];
        //     for(int j = max(i - k,0); j < i ; ++ j ){
        //         temp = max(dp[j]+nums[i],temp);
        //     }
        //     dp[i] = temp;
        // }        
        // return dp[nums.size()-1];
        
        int ans = nums[0];
        priority_queue<pair<int,int>> dp;   // 先按照pair的first进行排序，相同时按照second进行排序，默认排序大数在前，可以添加参数greater<int>设置小数在前
        dp.emplace(nums[0],0);
        for(int i = 1; i < nums.size(); i ++){
            while(i - dp.top().second > k)dp.pop();
            ans = nums[i]+dp.top().first;
            dp.emplace(ans,i);
        }
        return ans;
    }
};
