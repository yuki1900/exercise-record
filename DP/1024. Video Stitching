You are given a series of video clips from a sporting event that lasted T seconds.  These video clips can be overlapping with each other and have varied lengths.
Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1].  We can cut these clips into segments freely: for example, 
a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event ([0, T]).  If the task is impossible, return -1.

Example 1:

Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
Output: 3
Explanation: 
We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].

Example 2:

Input: clips = [[0,1],[1,2]], T = 5
Output: -1
Explanation: 
We can't cover [0,5] with only [0,1] and [1,2].

Example 3:

Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
Output: 3
Explanation: 
We can take clips [0,4], [4,7], and [6,9].

Example 4:

Input: clips = [[0,4],[2,8]], T = 5
Output: 2
Explanation: 
Notice you can have extra video after the event ends.

Constraints:

1 <= clips.length <= 100
0 <= clips[i][0] <= clips[i][1] <= 100
0 <= T <= 100

class Solution {
public:
    int videoStitching(vector<vector<int>>& clips, int T) {
        if(T == 0)return 0;
        // DP
        vector<int> dict(T,-1); // 简化clips为dict，dict[i]代表从i开始一直到dict[i]的时间都可以由一段clip覆盖
        for(auto clip : clips){
            if (clip[0] < T) 
                dict[clip[0]] = max(clip[1],dict[clip[0]]);
        }
        vector<int> dp(T+1,INT_MAX-101);    // 这里不初始化为INT_MAX是因为可能出现无法全覆盖[0,T]的情况，这时会INT_MAX+1会越界
        dp[0] = 0;
        for(int i = 1; i <= T ; i ++){
            for(int j = 0; j < i; j ++){
                if(dict[j]>=i){
                    dp[i] = min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[T] == INT_MAX-101 ? -1 : dp[T];

        // Greedy algorithm
        // vector<int> dict(T,-1);
        // for(auto clip : clips){
        //     if (clip[0] < T) 
        //         dict[clip[0]] = max(clip[1],dict[clip[0]]);
        // }
        // int begin = 0, end = 0, ans = 0, pre = 0;
        // for(int i = 0; i < T; i ++){
        //     if(i == 0){
        //         if(dict[i] == -1)return -1;
        //         begin = 0;
        //         end = dict[i];
        //         ans++;
        //     }
        //     else{
        //         if(i <= pre && dict[i] > end){
        //             end = dict[i];
        //         }
        //         else if(i <= end && dict[i] > end){
        //             pre = end;
        //             end = dict[i];
        //             ans++;
        //         }
        //     }
        //     if(end >= T)break;
        // }
        // return end >= T ? ans : -1;
    }
};
