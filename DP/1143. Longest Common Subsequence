Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.length(), vector<int>(text2.length(),0));
        dp[0][0] = text2[0] == text1[0] ? 1 : 0;
        for(int i = 1; i < text2.length(); i ++){
            if(text1[0] == text2[i]){
                dp[0][i] = 1;
            }
            else {
                dp[0][i] = dp[0][i-1];
            }
        }
        for(int j = 1; j < text1.length(); j ++){
            if(text1[j] == text2[0]){
                dp[j][0] = 1;
            }
            else {
                dp[j][0] = dp[j-1][0];
            }
        }
        for(int i = 1; i < text1.length(); i ++){
            for(int j = 1; j < text2.length(); j ++){
                if(text1[i] == text2[j]){
                    dp[i][j] = dp[i-1][j-1]+1;
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[text1.length()-1][text2.length()-1];
    }
};
