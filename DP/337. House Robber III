The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.
Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. 
It will automatically contact the police if two directly-linked houses were broken into on the same night.
Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.

Example 1:

Input: root = [3,2,3,null,3,null,1]
Output: 7
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.

Example 2:

Input: root = [3,4,5,1,3,null,1]
Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.

Constraints:

The number of nodes in the tree is in the range [1, 104].
0 <= Node.val <= 104

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*, int> f,g; // f[node]表示rob了node之后所能得到得最大钱数，g[node]表示没有rob了node之后所能得到得最大钱数
    void DFS(TreeNode* root){
        if(!root)return;
        // 左右根的遍历顺序，即后序遍历，确保当遍历到根时，其子节点的f和g值已经确定
        DFS(root->left);
        DFS(root->right);
        f[root] = root->val + g[root->left] + g[root->right];   // 若是rob了root，那么左孩子和右孩子都不能rob
        g[root] = max(f[root->left],g[root->left]) + max(f[root->right], g[root->right]);   // 若是没有rob了root，那么左右孩子都可以rob，要取最大值
    }
    int rob(TreeNode* root) {
        DFS(root);
        return max(f[root], g[root]);
    }
};
