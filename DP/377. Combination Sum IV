Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.

Example:
nums = [1, 2, 3]
target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.
Therefore the output is 7.

Follow up:
What if negative numbers are allowed in the given array?
How does it change the problem?
What limitation we need to add to the question to allow negative numbers?
Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

class Solution {
public:
    // 超时
    // int ans = 0;
    // void search(vector<int>&nums, int target){
    //     int temp;
    //     for(int i : nums){
    //         temp = target-i;
    //         if(temp==0){
    //             ans++;
    //         }
    //         else if(temp < 0)continue;
    //         else{
    //             search(nums,target-i);
    //         }
    //     }  
    // }
    // int combinationSum4(vector<int>& nums, int target) {
    //     search(nums,target);
    //     return ans;
    // }
    int combinationSum4(vector<int>& nums, int target) {
        vector<int> dp(target+1,0);
        for(int i = 1 ; i <= target ; ++i){
            for(int j = 0; j < nums.size() ; ++j){
                if(i - nums[j] == 0){
                    dp[i] ++ ;
                }
                // 不加 dp[i] < INT_MAX - dp[i - nums[j]] 条件会溢出。
                else if(i - nums[j] > 0 && dp[i] < INT_MAX - dp[i - nums[j]]){
                    dp[i] += dp[i-nums[j]];
                }
            }
        }
        return dp[target];
    }
};
