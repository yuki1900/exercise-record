Question:
Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.
Two squares belong to the same connected component if and only if they have the same color and are next to each other in any of the 4 directions.
The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, 
or on the boundary of the grid (the first or last row or column).
Given a square at location (r0, c0) in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid.

Answer:
class Solution {
public:
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int r0, int c0, int color) {
        
        vector<vector<int>> visit(grid.size(),vector<int>(grid[0].size())); // visit array
        vector<vector<int>> dir = {{1,0},{0,1},{0,-1},{-1,0}};              // define 4 directions
        queue<pair<int,int>> q;                                             // use BFS algorithm and queue
        
        int origin = grid[r0][c0], rl = grid.size(),cl = grid[0].size();    // initialize parameters
        q.push({r0,c0});        
        visit[r0][c0] = 1;      

        while(q.size()>0){
            int x = q.front().first, y = q.front().second;
            int r,c;
            q.pop();
            for(int i = 0; i < 4 ;i++){
                r = x + dir[i][0];
                c = y + dir[i][1];
                if(r>=0 && r<rl && c>=0 && c<cl){   // the adjacent point is in the range
                    if(visit[r][c])continue;        // if not visited, go next
                    if(grid[r][c]!=origin)grid[x][y] = color;   // if adjacent point is another color lead to a border
                    else q.push({r,c});                         // if they are the same lead to a connected component
                }
                else grid[x][y] = color;            // if not in the range lead to a border
                visit[x][y] = 1;                    // mark the point that was visited
            }
        }
        return grid;
    }
   
};

/*

[[1,1],[1,2]]
0
0
3

[[1,2,2],[2,3,2]]
0
1
3

[[1,1,1],[1,1,1],[1,1,1]]
1
1
2

[[2,1,3,2,1,1,2],[1,2,3,1,2,1,2],[1,2,1,2,2,2,2],[2,1,2,2,2,2,2],[2,3,3,3,2,1,2]]
4
4
3

*/
