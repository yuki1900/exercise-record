Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.
Return the maximum possible length of s.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All possible concatenations are "","un","iq","ue","uniq" and "ique".
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible solutions are "chaers" and "acters".

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lower case English letters.

class Solution {
public:
    // 把vector<bool> dp换成map<char,int> dp，其他不变，耗时会变为原来的10倍。
    int ans = 0;
    void find(vector<string>& arr, int pos, string nowStr, vector<bool> & dp){
        ans = ans > nowStr.size() ? ans : nowStr.size();
        if(pos == arr.size()){
            return ;
        }
        bool isRepeated = false;
        vector<bool> temp(dp);
        for(char c : arr[pos]){
            if(temp[c-97] == true){
                isRepeated = true;
                break;
            }
            else temp[c-97] = true;
        }
        find(arr,pos+1,nowStr,dp);
        if(!isRepeated){
            find(arr,pos+1,nowStr+arr[pos],temp);
        }
    }
    int maxLength(vector<string>& arr) {
        string nowStr = "";
        vector<bool> dp(26,false);
        find(arr,0,nowStr,dp);
        return ans;
    }
};
