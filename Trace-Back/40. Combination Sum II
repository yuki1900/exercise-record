Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Constraints:
1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

class Solution {
public:

    set<vector<int>> allans;
    void searchSum(vector<int>& candidates,int pos, int target, vector<int>& ans){
        if(target == 0){
            allans.insert(ans);    
            return ;
        }
        if(pos==candidates.size()){
            return ;
        }
        if(target-candidates[pos] >= 0){
            ans.push_back(candidates[pos]);
            searchSum(candidates,pos+1,target-candidates[pos],ans);
            ans.pop_back();
        }
        searchSum(candidates,pos+1,target,ans);

    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        
        sort(candidates.begin(),candidates.end());
        vector<int> ans;
        searchSum(candidates,0,target,ans);
        vector<vector<int> > finalans;
        for(auto vec : allans){
            finalans.push_back(vec);
        }
        return finalans;

    }
};
